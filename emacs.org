+title: Samuel Michael Vanie's EMACS Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el


* Declare some global variables

Declare some of my variables for my global configuration

#+BEGIN_SRC emacs-lisp
(setq gc-const-threshold (* 50 1000 1000))

;; You will most likely need to adjust this font size for your system!
(defvar smv/default-font-size 139)
(defvar smv/default-variable-font-size 139)

;; remove noise for not non allowed command in emacs if your system make them
(setq ring-bell-function 'ignore)

;; Make frame transparency overridable
(defvar smv/frame-transparency '(90 . 90))

(setq custom-file (locate-user-emacs-file "custom-vars.el"))
(load custom-file 'noerror 'nomessage)

(setq-default indent-tabs-mode nil)

;; auto refresh buffers when files changes
(global-auto-revert-mode t)
#+END_SRC


* Scrolling inside popup view

#+begin_src emacs-lisp
;; to scroll down inside the popup
(define-key global-map (kbd "C-M-'")
            (lambda ()
            (interactive)
            (scroll-other-window 2)))

;; to scroll up side the popup
(define-key global-map (kbd "C-M-\"")
            (lambda ()
            (interactive)
            (scroll-other-window-down 2)))

#+end_src

* Package System setup

Emacs has a built in package manager but it doesnâ€™t make it easy to automatically install packages on a new system the first time you pull down your configuration. use-package is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.
I don't know why but quelpa doesn't get install automatically (maybe a problem only on mac ?), you should install it manually by running `M-x package-install` then type quelpa

#+BEGIN_SRC emacs-lisp
;; Initialize package sources
(require 'package)
(require 'cl)
(require 'dired-x)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                        ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                        ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
(package-refresh-contents))


;; straight.el section
(defvar bootstrap-version)
(let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
(unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
    (goto-char (point-max))
    (eval-print-last-sexp)))
(load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)

(add-hook 'dired-mode-hook 'dired-hide-details-mode)

(global-set-key [remap dabbrev-expand] 'hippie-expand)

(use-package dashboard
:config
(dashboard-setup-startup-hook))

(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC


* Keep Folders clean

We use the no-littering package to keep folders where we edit files and the Emacs configuration folder clean! It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
                                          ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src


* Tree-sitter

#+begin_src emacs-lisp
(use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src




* Move stuff around the screen

#+begin_src emacs-lisp
(use-package drag-stuff
  :after hydra
  :init
  (drag-stuff-global-mode 1)
  :config
  (defhydra hydra-move-around (:timeout 3)
    "Move things around"
    ("h" drag-stuff-left "drag-stuff-left")
    ("l" drag-stuff-right "drag-stuff-right")
    ("j" drag-stuff-down "drag-stuff-down")
    ("k" drag-stuff-up "drag-stuff-up")
    ("f" nil "finished" :exit t))

  (smv/leader-keys
    "m" '(hydra-move-around/body :which-key "move around")))
#+end_src

* Shell

** Eshell Ouptut format

User friendly tool that uses Plan9 style interface to show command outputs. These ones are automatically paginates, making it easier to read and analyse them, particularly when dealing with large amouts of data.

#+begin_src emacs-lisp
(require 'em-smart)
(setq eshell-where-to-jump 'begin)
(setq eshell-review-quick-commands nil)
(setq eshell-smart-space-goes-to-end t)
(setq eshell-list-files-after-cd t)

;; Watch out you should have fish installed on your computer
(setq-default explicit-shell-file-name "/usr/bin/fish")
(setq eshell-aliases-file "~/.emacs.d/aliases")

(use-package eshell-toggle
    :bind ("C-x C-z" . eshell-toggle))
#+end_src


* Kill buffers

I'm writing this function to kill all the buffers because it is really boring to get the confirmation prompt every time you want to kill all the buffers with kill-some-buffers

#+begin_src emacs-lisp
(defun kill-all-buffers ()
"Kill all buffers without asking for confirmation."
(interactive)
(dolist (buffer (buffer-list))
    (kill-buffer buffer)))

(global-set-key (kbd "C-c k a") 'kill-all-buffers)
(global-set-key (kbd "C-k") 'kill-line)
#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.

#+begin_src emacs-lisp

(scroll-bar-mode -1) ; Disable visible scroll bar
(tool-bar-mode -1) ; Disable the toolbar
(tooltip-mode -1) ; Disable tooltips
(set-fringe-mode 10) ; Give some breathing room
(menu-bar-mode -1) ; Disable menu bar


(column-number-mode)
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode t) ;; print line numbers for files


;; Set frame transparency
(set-frame-parameter (selected-frame) 'alpha smv/frame-transparency)
(add-to-list 'default-frame-alist `(alpha . ,smv/frame-transparency))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Set frame font
(add-to-list 'default-frame-alist '(font . "JetbrainsMono Nerd Font"))

;; some modes doesn't have to start with lines enable
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
(add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

I use DaddyTimeMono Nerd Font as my main font for both fixed and variable fonts.

#+begin_src emacs-lisp
  ;; Change the font size (139) according to your screen
  (custom-set-faces
   '(fixed-pitch ((t (:height 139 :family "DaddyTimeMono Nerd Font"))))
   '(variable-pitch ((t (:weight light :height 139 :family "JetbrainsMono Nerd Font")))))
#+end_src


** Ligatures

You will need to install the package ligature, because it cannot be installed automatically. Use the command ~package-install~ and search for ligature.

#+begin_src emacs-lisp
(use-package ligature
:config
;; Enable all JetBrains Mono ligatures in programming modes
(ligature-set-ligatures 'prog-mode '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
                                        "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
                                        "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
                                        "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
                                        "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
                                        "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                                        ">>-" ">>=" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                                        "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                                        "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
                                        "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
                                        "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
;; Enables ligature checks globally in all buffers. You can also do it
;; per mode with `ligature-mode'.
(global-ligature-mode t))
#+end_src

** Adding color to delimiters

Rainbow permits to match pairs delimiters with the same color.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src


* Keybindings Configuration

** evil-mode

As a past vim user I use evil-mode to activate vim keybindings inside of my emacs configuration to navigate and edit code more easily.

I also use general which permits to configure more easily my keybindings with a leader key.

evil-collection permit to activate automatically evil-mode in multiple emacs packages

#+begin_src emacs-lisp

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package general ;; for setting keybindings
:config
(general-create-definer smv/leader-keys
    :keymaps '(normal visual emacs)
    :prefix "SPC"
    :global-prefix "SPC")

(smv/leader-keys
    "t" '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")))

;; hydra permit to repeat a command easily without repeating the keybindings multiple times
(use-package hydra)

;; Activate vim keybindings inside of emacs
(use-package evil
:init
(setq evil-want-integration t)
(setq evil-want-keybinding nil)
(setq evil-want-C-u-scroll nil)
(setq evil-want-C-d-scroll nil)
(setq evil-v$-excludes-newline t)
(setq evil-respect-visual-line-mode t)
(setq evil-undo-system 'undo-redo)
(setq evil-want-C-i-jump nil)
:config
(evil-mode 1)
(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
(define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

(define-key evil-insert-state-map (kbd "C-n") nil)
(define-key evil-insert-state-map (kbd "C-p") nil)

(define-key evil-normal-state-map (kbd "C-n") nil)
(define-key evil-normal-state-map (kbd "C-p") nil)

(define-key evil-normal-state-map (kbd "C-u") 'evil-jump-forward)

(define-key evil-visual-state-map (kbd "C-n") nil)
(define-key evil-visual-state-map (kbd "C-p") nil)

(define-key evil-visual-state-map (kbd "C-a") nil)
(define-key evil-normal-state-map (kbd "C-a") nil)
(define-key evil-insert-state-map (kbd "C-a") nil)

(define-key evil-visual-state-map (kbd "C-e") nil)
(define-key evil-normal-state-map (kbd "C-e") nil)
(define-key evil-insert-state-map (kbd "C-e") nil)

(define-key evil-visual-state-map (kbd "C-d") nil)
(define-key evil-normal-state-map (kbd "C-d") nil)
(define-key evil-insert-state-map (kbd "C-d") nil)

(evil-set-initial-state 'messages-buffer-mode 'normal)
(evil-set-initial-state 'dashboard-mode 'normal))


;; Add evil-keybindings to more modes inside of emacs
(use-package evil-collection
:after evil
:config
(evil-collection-init))


(use-package evil-surround
:config
(global-evil-surround-mode 1))
#+end_src



** Ace-jump mode

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :bind
  ("C-c SPC" . ace-jump-mode))
#+end_src

* Browser and pdf viewer

To not be disrupted in my workflow I decided to use a built-in browser that has some javascript integration. (never leave emacs)
If dependency cause problems just check that you don't have any other old version of the dependencies and delete them. And try installing them again.
On arch-linux I did install =python-pyqt6-webengine=, =desktop-notify= and =python-pyqt6= using pacman.

#+begin_src emacs-lisp
(use-package eaf
    :demand t
    :straight (eaf
            :type git
            :host github
            :repo "emacs-eaf/emacs-application-framework"           
            :files ("*.el" "*.py" "core" "app" "*.json")
            :includes (eaf-pdf-viewer eaf-browser))
    :bind ("C-c n" . eaf-open-browser-with-history))

(add-hook #'eaf-mode-hook #'turn-off-evil-mode nil)

(use-package eaf-browser
    :custom
    (eaf-browser-continue-where-left-off t)
    (eaf-browser-enable-adblocker t))

(use-package eaf-pdf-viewer)
#+end_src




* vterm

Vterm is a better terminal emulator that will permit good rendering of all terminal commands

#+begin_src emacs-lisp
(use-package vterm)

(use-package multi-vterm
        :config
        (add-hook 'vterm-mode-hook
                        (lambda ()
                        (setq-local evil-insert-state-cursor 'box)
                        (evil-insert-state)))
        (define-key vterm-mode-map [return]                      #'vterm-send-return)
        (global-set-key (kbd "C-x C-y") 'multi-vterm)
        (setq vterm-keymap-exceptions nil)
        (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
        (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
        (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
        (evil-define-key 'normal vterm-mode-map (kbd "SPC c")       #'multi-vterm)
        (evil-define-key 'normal vterm-mode-map (kbd "SPC n")       #'multi-vterm-next)
        (evil-define-key 'normal vterm-mode-map (kbd "SPC p")       #'multi-vterm-prev)
        (evil-define-key 'normal vterm-mode-map (kbd "SPC r")       #'multi-vterm-rename-buffer)
        (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
        (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
        (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))

#+end_src



* UI Configuration

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] and ef  are a set of themes that support various emacs modes. It also has support for doom-modeline that I use as my mode line.
Counsel can permit quickly switch between these themes, hit ~M-x counsel-load-theme~

#+begin_src emacs-lisp
(use-package doom-themes)
(use-package ef-themes
    :config
    (load-theme 'ef-bio t))
#+end_src

** Better Mode line

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich mode line configuration for emacs. I use all-the-icons packages to add to it some cool icons.
You will have to install the icons on your machine before to get the full functionnalities : ~M-x all-the-icons-install-fonts~ .

#+begin_src emacs-lisp
(use-package all-the-icons
    :if (display-graphic-p))

(use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]]  is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix. For example, if you press C-c (hold control and press the letter c), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run. This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
(use-package which-key ;; print next keybindings
	     :init (which-key-mode) ;; happens before the package is loaded
	     :diminish which-key-mode
	     :config ;; only runs after the mode is loaded
	     (setq which-key-idle-delay 0.3))
#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]]  is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs. Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]]  adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
          :map ivy-minibuffer-map
          ("TAB" . ivy-alt-done)
          ("C-l" . ivy-alt-done)
          ("C-j" . ivy-next-line)
          ("C-k" . ivy-previous-line)
          :map ivy-switch-buffer-map
          ("C-k" . ivy-previous-line)
          ("C-l" . ivy-done)
          ("C-d" . ivy-switch-buffer-kill)
          :map ivy-reverse-i-search-map
          ("C-k" . ivy-previous-line)
          ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
          :map minibuffer-local-map
          ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))
#+end_src

*** Improved Candidate Sorting with prescient.el

[[https://github.com/radian-software/prescient.el][prescient.el]] provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them. This can be especially helpful when using M-x to run commands that you donâ€™t have bound to a key but still need to access occasionally.

#+begin_src emacs-lisp

(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  ;(prescient-persist-mode 1)
  (ivy-prescient-mode 1))

#+end_src

** Treemacs

#+begin_src emacs-lisp
(use-package treemacs
:defer t
:init
(with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
:config
(progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
        treemacs-deferred-git-apply-delay        0.5
        treemacs-directory-name-transformer      #'identity
        treemacs-display-in-side-window          t
        treemacs-eldoc-display                   'simple
        treemacs-file-event-delay                2000
        treemacs-file-extension-regex            treemacs-last-period-regex-value
        treemacs-file-follow-delay               0.2
        treemacs-file-name-transformer           #'identity
        treemacs-follow-after-init               t
        treemacs-expand-after-init               t
        treemacs-find-workspace-method           'find-for-file-or-pick-first
        treemacs-git-command-pipe                ""
        treemacs-goto-tag-strategy               'refetch-index
        treemacs-header-scroll-indicators        '(nil . "^^^^^^")
        treemacs-hide-dot-git-directory          t
        treemacs-indentation                     2
        treemacs-indentation-string              " "
        treemacs-is-never-other-window           nil
        treemacs-max-git-entries                 5000
        treemacs-missing-project-action          'ask
        treemacs-move-forward-on-expand          nil
        treemacs-no-png-images                   nil
        treemacs-no-delete-other-windows         t
        treemacs-project-follow-cleanup          nil
        treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
        treemacs-position                        'left
        treemacs-read-string-input               'from-child-frame
        treemacs-recenter-distance               0.1
        treemacs-recenter-after-file-follow      nil
        treemacs-recenter-after-tag-follow       nil
        treemacs-recenter-after-project-jump     'always
        treemacs-recenter-after-project-expand   'on-distance
        treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask" "/target")
        treemacs-project-follow-into-home        nil
        treemacs-show-cursor                     nil
        treemacs-show-hidden-files               t
        treemacs-silent-filewatch                nil
        treemacs-silent-refresh                  nil
        treemacs-sorting                         'alphabetic-asc
        treemacs-select-when-already-in-treemacs 'move-back
        treemacs-space-between-root-nodes        t
        treemacs-tag-follow-cleanup              t
        treemacs-tag-follow-delay                1.5
        treemacs-text-scale                      nil
        treemacs-user-mode-line-format           nil
        treemacs-user-header-line-format         nil
        treemacs-wide-toggle-width               70
        treemacs-width                           35
        treemacs-width-increment                 1
        treemacs-width-is-initially-locked       t
        treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)

    (pcase (cons (not (null (executable-find "git")))
                (not (null treemacs-python-executable)))
    (`(t . t)
        (treemacs-git-mode 'deferred))
    (`(t . _)
        (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
            ("M-0"       . treemacs-select-window)
            ("C-x t 1"   . treemacs-delete-other-windows)
            ("C-x t t"   . treemacs)
            ("C-x t d"   . treemacs-select-directory)
            ("C-x t B"   . treemacs-bookmark)
            ("C-x t C-t" . treemacs-find-file)
            ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
    :after (treemacs evil))

(use-package treemacs-projectile
    :after (treemacs projectile))

(use-package treemacs-all-the-icons)

(use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))

(use-package treemacs-magit
    :after (treemacs magit))

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :config (treemacs-set-scope-type 'Tabs))
#+end_src


** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacsâ€™ describe- command buffers. For example, if you use describe-function, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration. It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src


** Text Scaling

I use hydra to build a trasient that will permit me to quickly adjust the scale of my text. I boud it to `C-s t s`, and once activated, j and k to increase and decrease the text size.

#+begin_src emacs-lisp

(defhydra hydra-text-scale (:timeout 3)
  "scalte text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(smv/leader-keys ;; use general to set a keybinding to quickly change text size
  "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src


* Org Mode

[[https://orgmode.org/][OrgMode]] is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

I create a function called `smv/org-font-setup` to configure various text faces for tweaking org-mode. I have fixed font for code source, table, ... and variable font (Roboto Condensed light for text).

#+begin_src emacs-lisp

(defun smv/org-font-setup ()
    (font-lock-add-keywords 'org-mode ;; Change the list icon style from "-" to "."
                            '(("^ *\\([-]\\) "
                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([+]\\) "
                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â—¦"))))))

    ;; configuration of heading levels size
    (dolist (face '((org-level-1 . 1.2)
                        (org-level-2 . 1.1)
                        (org-level-3 . 1.05)
                        (org-level-4 . 1.0)
                        (org-level-5 . 1.1)
                        (org-level-6 . 1.1)
                        (org-level-7 . 1.1)
                        (org-level-8 . 1.1)))
        (set-face-attribute (car face) nil :font "VictorMono" :weight 'regular :height (cdr face)))
        ;; Ensure that anything that should be fixed-pitch in Org files appears that way
        (set-face-attribute 'org-block nil    :inherit 'fixed-pitch)
        (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
        (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
        (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
        (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
        (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src


** Basic Config

This section contains the basic configuration for org-mode plus the configuration for Org agendas and capture templates

#+begin_src emacs-lisp

(defun smv/org-mode-setup()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil)
    (smv/org-font-setup))


(use-package org ;; org-mode, permit to take notes and other interesting stuff with a specific file extension
    :straight org-contrib
    :hook (org-mode . smv/org-mode-setup)
    :config
    (setq org-ellipsis " â–¼:")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
            '("~/.org/todo.org"
            "~/.org/projects.org"))

    (setq org-todo-keywords
            '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    ;; easily move task to another header
    (setq org-refile-targets
            '(("archive.org" :maxlevel . 1)
            ("todo.org" :maxlevel . 1)
            ("projects.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
        '((:startgroup)
            ; Put mutually exclusive tags here
            (:endgroup)
            ("@school" . ?s)
            ("personal" . ?p)
            ("note" . ?n)
            ("idea" . ?i)))

    (setq org-agenda-custom-commands
        '(("d" "Dashboard"
        ((agenda "" ((org-deadline-warning-days 7)))
        (todo "TODO"
            ((org-agenda-overriding-header "All tasks")))))

        ("n" "Next Tasks"
        ((todo "NEXT"
            ((org-agenda-overriding-header "Next Tasks")))))

        ("s" "School Tasks" tags-todo "@school+CATEGORY=\"project_task\"")

        ("P" "Projects" tags-todo "+projects/ACTIVE")

        ;; Low-effort next actions
        ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
        ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))))

    (setq org-capture-templates ;; quickly add todos entries without going into the file
        `(("t" "Tasks")
        ("tt" "Task" entry (file+olp "~/.org/todo.org" "Tasks")
                "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)))


    (smv/org-font-setup)
    (global-set-key (kbd "C-c a") 'org-agenda))

#+end_src


** Auto rendering latex section

#+begin_src emacs-lisp
(use-package org-fragtog
    :hook (org-mode-hook . org-fragtog-mode))
#+end_src

** Presentation

#+begin_src emacs-lisp
(use-package ox-reveal)
#+end_src


** Nicer Heading

[[https://github.com/sabof/org-bullets][org-bullets]] permits to change the icon used for the different headings in org-mode.

I use also `org-num` to add numbers in front of my different headlines.

#+begin_src emacs-lisp

(use-package org-bullets ;; change the bullets in my org mode files
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("â—‰" "â˜¯" "â—‹" "â˜¯" "âœ¸" "â˜¯" "âœ¿" "â˜¯" "âœœ" "â˜¯" "â—†" "â˜¯" "â–¶")))

;; Outline numbering for org mode
(use-package org-num
    :straight nil
    :load-path "lisp/"
    :after org
    :hook (org-mode . org-num-mode))

(use-package org-projectile)
#+end_src


** Center buffers

To center buffers I use the [[https://github.com/rnkn/olivetti][olivetti]] minor-mode. It is more easy and pratical and doesn't only serve in org-mode.

#+begin_src emacs-lisp
;; use to stretch the page on the center to be able to focus on document writing
(use-package olivetti
    :hook (org-mode-hook . olivetti-mode))
#+end_src


** Configure Babel Languages

To execute or export code in org-mode code blocks, youâ€™ll need to set up org-babel-load-languages for each language youâ€™d like to use. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with org-babel.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src


** Structure Templates

Org mode's [[https://orgmode.org/manual/Structure-Templates.html][structure template]] feature enables you to quickly insert code blocks into your Org files in combination with `org-tempo` by typing `<` followed by the template name like `el` or `py` and then press `TAB`. For example, to insert an empy `emacs-lisp` block below, you can type `<el` and press `TAB` to expand into such a block.

#+begin_src emacs-lisp
(with-eval-after-load 'org
;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("ru" . "src rust")))
#+end_src


** Auto-tangle Configuration files

This snippets adds a hook to `org-mode` buffers so that efs/org-babel-tangle-config gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file youâ€™re looking at right now, and if so, automatically exports the configuration here to the associated output files. Tangle is use to export org mode files into the configuration init.el file.

#+begin_src emacs-lisp

;; Automatically tangle our Emacs.org config file when we save it
(defun smv/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.d/emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'smv/org-babel-tangle-config)))

#+end_src



* Development

** Commenting Code

To help me comment code region quickly I set up this keyboard shortcut. The function used is a native emacs function.

#+begin_src emacs-lisp
(global-set-key (kbd "C-M-;") 'comment-region)
#+end_src

** Languages

*** IDE Features with lsp-mode

Language server configuration for programming part.
I use some useful lsp packages with downloaded languages server for my programming journey.

**** lsp-mode

#+begin_src emacs-lisp

(defun efs/lsp-mode-setup ()
(setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
(lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)
    ;; only watch over the current project directory files
    (setq lsp-file-watch-ignored-directories (list (rx-to-string `(and (or bos "/" (and "/home" (* any)) "/") (not (any ".")))
                                            'no-group))))

#+end_src

**** lsp-ui

#+begin_src emacs-lisp
(use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'at-point)
    (lsp-ui-doc-enable t)
    (lsp-ui-sideline-show-diagnostics t)
    :bind
    (:map evil-normal-state-map ("H" . lsp-ui-doc-toggle))
    :config
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))
#+end_src

**** lsp-treemacs

#+begin_src emacs-lisp

(use-package lsp-treemacs
  :after lsp)

#+end_src

**** lsp-ivy

lsp-ivy integrates Ivy with lsp-mode to make it easy to search for things by name in your code. When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code. Results will be populated in the minibuffer so that you can find what youâ€™re looking for and jump to that location in the code upon selecting the result.

#+begin_src emacs-lisp
(use-package lsp-ivy)
#+end_src

**** flycheck

Show error on fly with flycheck package

#+begin_src emacs-lisp
(use-package flycheck)
#+end_src


**** yasnippet

Useful snippets for quick programming

#+begin_src emacs-lisp
(use-package yasnippet
    :config (yas-global-mode))
#+end_src


*** Yaml-mode

Mode for yaml configuration files editing.

#+begin_src emacs-lisp
(use-package yaml-mode
:mode (("\\.yml\\'" . yaml-mode)
            ("\\.yaml\\'" . yaml-mode)
            ))
#+end_src


*** Debugging with dap-mode

Dap-mode is the debugger mode. It goes with lsp-mode

#+begin_src emacs-lisp
(use-package dap-mode
    :after
    lsp-mode
    :bind (:map dap-mode-map
            ("<f5>" . dap-debug)
            ("<f9>" . dap-breakpoint-toggle)
            ("C-<f9>" . dap-breakpoint-condition)
            ("M-<f9>" . dap-breakpoint-log-message)
            ("<f10>" . dap-next)
            ("<f11>" . dap-step-in)
            ("S-<f11>" . dap-step-out)
            ("<f12>" . dap-ui-inspect-thing-at-point)
            ("C-<f5>" . dap-stop-thread)
            ("S-<f5>" . dap-restart-frame)
            :map dap-ui-repl-mode-map
            ("C-<f5>" . dap-stop-thread)
            ("S-<f5>" . dap-restart-frame)
            ("<f12>" . dap-ui-inspect-thing-at-point))
    :config
    (dap-auto-configure-mode)
    (evil-define-key 'normal dap-mode-map (kbd "K") #'dap-tooltip-at-point)
    :hook (dap-stopped . (lambda (arg) (call-interactively #'dap-hydra)))
)

(require 'dap-cpptools)
#+end_src


*** Web Programming

**** Emmet-mode

Emmet mode allors you to easily expand html and css abbreviations for instance if I type "p" then press control and j I get <p></p>. You can also use things like ~".container>section>(h1+p)"~.

#+begin_src emacs-lisp
(use-package emmet-mode)
#+end_src

**** Web-mode

The useful web mode for programming.
I use firefox as my browser so I install dap-firefox to quickly debug my javascript code inside this browser.
Check the documentation for your browser : [[https://emacs-lsp.github.io/dap-mode/page/configuration/][lsp configuration]]

#+begin_src emacs-lisp

(defun smv/web-mode-hook ()
"Hooks for Web mode."
(setq web-mode-markup-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-code-indent-offset 2)
(setq web-mode-enable-current-column-highlight t)
(setq web-mode-enable-current-element-highlight t)
(set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files))
)

(use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
            ("\\.css?\\'" . web-mode)
            )
    :hook
    (web-mode . smv/web-mode-hook)
    (web-mode . emmet-mode)
    (web-mode . prettier-mode)
    (web-mode . lsp-deferred)
    :config
    (require 'dap-firefox)
    (dap-firefox-setup)
)

(setq dap-firefox-debug-program '("node" "/home/vanieb/.emacs.d/var/dap/extensions/vscode/firefox-devtools.vscode-firefox-debug/extension/dist/adapter.bundle.js"))

(add-hook 'web-mode-before-auto-complete-hooks
    '(lambda ()
    (let ((web-mode-cur-language
            (web-mode-language-at-pos)))
                (if (string= web-mode-cur-language "php")
            (yas-activate-extra-mode 'php-mode)
        (yas-deactivate-extra-mode 'php-mode))
                (if (string= web-mode-cur-language "css")
            (setq emmet-use-css-transform t)
        (setq emmet-use-css-transform nil)))))

#+end_src


**** JSX support

#+begin_src emacs-lisp
(use-package rjsx-mode
  :mode (("\\.js\\'" . rjsx-mode)
            ("\\.ts\\'" . rjsx-mode))
  :hook
  (rjsx-mode . emmet-mode)
  (rjsx-mode . prettier-mode)
  (rjsx-mode . lsp-deferred))
#+end_src

**** prettier

Prettier automatically formats the code for you. I hate when it's in other modes but in web mode it's quite useful.

#+begin_src emacs-lisp
(use-package prettier)
#+end_src

*** TypeScript

Typescript configuration in lsp.
You will need to install typescript-language-server with `npm install -g typescript-language-server typescript` .

#+begin_src emacs-lisp

(use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2)
    (require 'dap-node)
    (dap-node-setup))

#+end_src

*** PHP

Installing PHP

#+begin_src emacs-lisp
(use-package php-mode
  :mode "\\.php\\'"
  )
#+end_src


*** C#

Installing csharp lsp functionnality. The csharp-mode is part of the core emacs.
To do so just run the ~lsp-install-server~ command in your M-x prompt then install the ~csharp-lsp~ server.

*** JAVA

#+begin_src emacs-lisp
(use-package lsp-java
    :config
    (add-hook 'java-mode-hook 'lsp)
    ;; current VSCode defaults for quick load
    (setq lsp-java-configuration-runtimes '[(:name "openjdk-17"
                        :path "/usr/lib/jvm/java-17-openjdk/")
                    (:name "openjdk-21"
                        :path "/usr/lib/jvm/java-21-openjdk/"
                    :default t)]))

(require 'lsp-java-boot)

;; to enable the lenses
(add-hook 'lsp-mode-hook #'lsp-lens-mode)
(add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)
#+end_src

*** R

#+begin_src emacs-lisp
;;(use-package ess)
#+end_src

*** RUST

#+begin_src emacs-lisp
(use-package rust-mode)

(use-package rust-ts-mode
    :mode "\\.rs\\'"
    :bind-keymap
    ("C-c c" . rust-mode-map)
    :hook (rust-ts-mode . lsp-deferred)
    :config
    (require 'dap-cpptools)
    (dap-cpptools-setup))

(require 'dap-gdb-lldb)
;; set the linter to clippy
(setq lsp-rust-analyzer-cargo-wath-command "clippy")
#+end_src

*** DART & FLUTTER

#+begin_src emacs-lisp
(use-package flutter)

(use-package dart-mode
    :mode "\\.dart\\'"
    :hook (dart-mode . lsp-deferred)
)

(use-package lsp-dart
    :hook
    (dart-mode . lsp)
    :config
    (setq lsp-dart-sdk-dir "/home/vanieb/development/flutter/bin/cache/dart-sdk")
    (setq lsp-dart-flutter-sdk "/home/vanieb/development/flutter")
    (setq flutter-sdk-path "/home/vanieb/development/flutter"))
#+end_src


** Company Mode

Company Mode provides a nicer in-buffer completion interface than completion-at-point which is more reminiscent of what you would expect from an IDE. We add a simple configuration to make the keybindings a little more useful (TAB now completes the selection and initiates completion at the current location if needed).

#+begin_src emacs-lisp
(use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

(use-package company-box
    :hook
    (company-mode . company-box-mode))

(use-package company-tabnine
    :config
    (add-to-list 'company-backends #'company-tabnine))
#+end_src


** Docker Mode

Quickly manages [[https://github.com/Silex/docker.el][docker]] container directly inside emacs.

#+begin_src emacs-lisp
(use-package docker
    :bind ("C-c d" . docker))

(use-package dockerfile-mode)
#+end_src


** Github Copilot

Using github copilot has my pair programming assistant to finish my tasks more quickly.
Uncomment the commented parts only when you will finish installing copilot.

#+begin_src emacs-lisp
(defun rk/copilot-complete-or-accept ()
    "Command that either triggers a completion or accepts one if one
is available. Useful if you tend to hammer your keys like I do."
    (interactive)
    (if (copilot--overlay-visible)
        (progn
        (copilot-accept-completion)
        (open-line 1)
        )
    (copilot-complete)))

(defun rk/copilot-quit ()
"Run `copilot-clear-overlay' or `keyboard-quit'. If copilot is
cleared, make sure the overlay doesn't come back too soon."
(interactive)
(condition-case err
    (when copilot--overlay
        (lexical-let ((pre-copilot-disable-predicates copilot-disable-predicates))
        (setq copilot-disable-predicates (list (lambda () t)))
        (copilot-clear-overlay)
        (run-with-idle-timer
            1.0
            nil
            (lambda ()
            (setq copilot-disable-predicates pre-copilot-disable-predicates)))))
    (error handler)))

(defun rk/no-copilot-mode ()
"Helper for `rk/no-copilot-modes'."
(copilot-mode -1))

(defvar rk/no-copilot-modes '(shell-mode
                                inferior-python-mode
                                eshell-mode
                                term-mode
                                vterm-mode
                                comint-mode
                                compilation-mode
                                debugger-mode
                                dired-mode-hook
                                compilation-mode-hook
                                flutter-mode-hook
                                minibuffer-mode-hook)
    "Modes in which copilot is inconvenient.")

(defvar rk/copilot-manual-mode nil
    "When `t' will only show completions when manually triggered, e.g. via M-C-<return>.")

(defvar rk/copilot-enable-for-org nil
    "Should copilot be enabled for org-mode buffers?")


(defun rk/copilot-enable-predicate ()
    ""
    (and
    (eq (get-buffer-window) (selected-window))))

(defun rk/copilot-disable-predicate ()
    "When copilot should not automatically show completions."
    (or rk/copilot-manual-mode
        (member major-mode rk/no-copilot-modes)
        (and (not rk/copilot-enable-for-org) (eq major-mode 'org-mode))
        (company--active-p)))

(defun rk/copilot-change-activation ()
    "Switch between three activation modes:
    - automatic: copilot will automatically overlay completions
    - manual: you need to press a key (C-M-<return>) to trigger completions
    - off: copilot is completely disabled."
    (interactive)
    (if (and copilot-mode rk/copilot-manual-mode)
        (progn
        (message "deactivating copilot")
        (global-copilot-mode -1)
        (setq rk/copilot-manual-mode nil))
    (if copilot-mode
        (progn
            (message "activating copilot manual mode")
            (setq rk/copilot-manual-mode t))
        (message "activating copilot mode")
        (global-copilot-mode))))


(straight-use-package '(copilot :host github
                            :repo "copilot-emacs/copilot.el"
                            :branch "main"
                            :files ("dist" "*.el")))

(require 'copilot)
;; keybindings that are active when copilot shows completions
(define-key copilot-mode-map (kbd "C-M-<next>") #'copilot-next-completion)
(define-key copilot-mode-map (kbd "C-M-<prior>") #'copilot-previous-completion)
(define-key copilot-mode-map (kbd "C-M-<right>") #'copilot-accept-completion-by-word)
(define-key copilot-mode-map (kbd "C-M-<return>") #'copilot-accept-completion-by-line)

;;global keybindings
(define-key global-map (kbd "C-M-<down>") #'rk/copilot-complete-or-accept)
(define-key global-map (kbd "C-M-<escape>") #'rk/copilot-change-activation)

;;Do copilot-quit when pressing C-g
(advice-add 'keyboard-quit :before #'rk/copilot-quit)

;; complete by pressing right or tab but only when copilot completions are
;; ;; shown. This means we leave the normal functionality intact.
(advice-add 'right-char :around #'rk/copilot-complete-if-active)

;; ;; deactivate copilot for certain modes
(add-to-list 'copilot-enable-predicates #'rk/copilot-enable-predicate)
(add-to-list 'copilot-disable-predicates #'rk/copilot-disable-predicate)

#+end_src

** Gptel

Using chatgpt directly in emacs so that I will not be obliged to switch to the web browser when coding.

#+begin_src emacs-lisp
  ;; (defun smv/gptel-api-key ()
  ;;   "Retrieve my OpenAI API key from a secure location."
  ;;   (with-temp-buffer
  ;;     (insert-file-contents-literally "~/.open_api_key")
  ;;     (string-trim (buffer-string))))

  ;; (use-package gptel)
  ;; (setq gptel-api-key (smv/gptel-api-key))
#+end_src


** Youdotcom

This is my own package to make web search and chat directly inside emacs

#+begin_src emacs-lisp
(use-package youdotcom
    :bind
    ("C-c y" . youdotcom-enter)
    :config
    (setq youdotcom-rag-api-key ""))
#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is my project management library for Emacs, it makes a lot easier to navigate around code for various languages.

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '("~/projects")))
  (setq projectile-switch-project-action #'projectile-dired))


(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))

#+end_src


** Magit

[[https://magit.vc/][Magit]] is a git interface for emacs. It's very handy and fun to use.

#+begin_src emacs-lisp
(use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  
(setq gc-const-threshold (* 2 1000 1000))
#+end_src

